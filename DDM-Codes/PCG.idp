//Preconditioned Conjugate Gradient Applied to system
//A(un[])=rhsglobal[]
//preconditioned by the linear operator
//AS: r[] -> AS(r[])

func real[int] myPCG(real[int] xi, real eps, int nitermax)
{
    ofstream filei("Convprec.m");
    Vh r, un, p, zr, rn, w, er;
    un[]=xi;
    r[]=A(un[]); //Matrix product.
    r[]-=rhsglob[];
    r[]*=-1.0;
    zr[]=AS(r[]); //M^-1*r;
    real resinit=sqrt(zr[]'*zr[]);
    p=zr;
    for(int it=0; it<nitermax; ++it)
    {
        real relres=sqrt(zr[]'*zr[])/resinit;
        cout<<"Iteration: "<<it<<" Relative Residual = "<<relres<<endl;
        int j=it+1;
        filei<<"relres("+j+")="<<relres<<";"<<endl;
        if(relres<eps)
        {
            cout<<"CG has converged in "+it+" iterations"<<endl;
            cout<<"The relative residual is "+relres<<endl;
            break;
        }
        //This block follows along the same line as myCG.edp
        w[]=A(p[]);
        real alpha=r[]'*zr[];
        real aux2=alpha;
        real aux3=w[]'*p[];
        alpha/=aux3; //alpha = (M^-1*r,r)/(Ap,p);
        un[]+=alpha*p[]; //Update the solution
        r[]-=alpha*w[]; //Update r[]
        zr[]=AS(r[]); //zj+1=M^-1*rj+1 (From the PCG step)
        real beta=r[]'*zr[];
        beta/=aux2; //beta = (rj+1,zj+1)/(rj,zj)
        p[]*=beta;
        p[]+=zr[];    
    }
    return un[];
}
